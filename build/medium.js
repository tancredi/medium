// Generated by CoffeeScript 1.3.3
(function() {
  var cheerio, getData, parseData, parseImages, request, solveRelativeUrl, trimString;

  cheerio = require("cheerio");

  request = require('request');

  module.exports.getData = getData;

  getData = function(url, cb) {
    if (url.indexOf('http') === -1) {
      url = "http://" + url;
    }
    return request(url, function(err, response, body) {
      var data;
      if (!(typeof error !== "undefined" && error !== null) && response.statusCode === 200) {
        data = parseData(body, url);
        if (data) {
          return cb(null, data);
        } else {
          return cb('No data retrieved', null);
        }
      } else if (err != null) {
        return cb(err, null);
      } else {
        return cb('HTTP request unsuccessful', null);
      }
    });
  };

  parseData = function(html, url) {
    var $, data;
    data = {
      url: url
    };
    $ = cheerio.load(html);
    if ($('head title').length !== 0) {
      data.title = $('head title').text();
    } else {
      return false;
    }
    data.images = parseImages($, url);
    if ($('meta[type="description"]').length !== 0) {
      data.description = $('meta[name="description"]').attr('content');
    } else {
      data.description = $('h1').first().text();
    }
    data.description = trimString(data.description);
    return data;
  };

  parseImages = function($, url) {
    var images;
    images = [];
    if ($('img').length !== 0) {
      $('img').each(function() {
        var imageUrl;
        imageUrl = solveRelativeUrl($(this).attr('src'), url);
        return images.push(imageUrl);
      });
    } else {
      $('[style]').each(function() {
        var imageUrl;
        if ($(this).attr('style').indexOf('url(' !== -1)) {
          imageUrl = $(this).attr('style').match(/url\((.*?)\)/);
          if (imageUrl != null) {
            imageUrl = solveRelativeUrl(imageUrl[1], url);
            return images.push(imageUrl);
          }
        }
      });
    }
    return images;
  };

  solveRelativeUrl = function(url, baseUrl) {
    if (url.indexOf('http') !== -1) {
      return url;
    } else {
      return baseUrl + url;
    }
  };

  trimString = function(str) {
    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  };

}).call(this);
